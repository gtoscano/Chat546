"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import json

from celery.schedules import crontab
from dotenv import load_dotenv
from os.path import join, dirname
from datetime import timedelta

dotenv_path = join(dirname(__file__), ".env")
load_dotenv(dotenv_path)

HOST_IP = os.environ.get("HOST_IP", "localhost")
HOST_NAME = os.environ.get("HOST_NAME", "ignitehub.catholic-u.ai")
DB_ENGINE = os.environ.get("DB_ENGINE", "django.db.backends.postgresql")
DB_HOST = os.environ.get("DB_HOST", "localhost")
DB_PORT = os.environ.get("DB_PORT", "5432")
POSTGRES_DB = os.environ.get("POSTGRES_DB", "ignitehub_db")
POSTGRES_USER = os.environ.get("POSTGRES_USER", "postgres")
POSTGRES_PASSWORD = os.environ.get("POSTGRES_PASSWORD", "mysecretpassword")

DJANGO_DEBUG = json.loads(os.environ.get("DJANGO_DEBUG", "true").lower())
DJANGO_SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "")


EMAIL_HOST = os.environ.get("EMAIL_HOST", "posteo.de")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "gtoscano@posteo.net")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", EMAIL_HOST_USER)
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

REDIS_HOST = os.environ.get("REDIS_HOST", "127.0.0.1")
REDIS_PORT = int(os.environ.get("REDIS_PORT", "6379"))
REDIS_DB_CELERY = os.environ.get("REDIS_DB_CELERY", "1")
REDIS_DB_RESULT = os.environ.get("REDIS_DB_RESULT", "1")
REDIS_DB_CACHE = os.environ.get("REDIS_DB_CACHE", "3")

# Maximum size (in bytes) that a request can be before raising a SuspiciousOperation (413) error.
DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100 MB

# Maximum size (in bytes) that a file can be before it gets streamed to the file system.
FILE_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100 MB

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = DJANGO_SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static_files"),
]
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

CORS_ORIGIN_WHITELIST = [
    "127.0.0.1:8080",
    "http://localhost:8080",
    "https://localhost:8080",
    f"http://{HOST_IP}:8080",
    f"https://{HOST_IP}:8080",
    f"http://{HOST_NAME}",
    f"https://{HOST_NAME}",
]

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    HOST_IP,
    HOST_NAME,
]


CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:8080",
    "https://127.0.0.1:8080",
    "http://localhost:8080",
    "https://localhost:8080",
    f"http://{HOST_IP}:8080",
    f"https://{HOST_IP}:8080",
    f"http://{HOST_NAME}",
    f"https://{HOST_NAME}",
]


CSRF_TRUSTED_ORIGINS = [
    "http://127.0.0.1:8080",
    "https://127.0.0.1:8080",
    f"http://{HOST_IP}:8080",
    f"https://{HOST_IP}:8080",
    "http://localhost:8080",
    "https://localhost:8080",
    f"http://{HOST_NAME}",
    f"https://{HOST_NAME}",
]


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

SITE_ID = 1
SECURE_SSL_REDIRECT = os.environ.get("SECURE_SSL_REDIRECT", "False") == "True"
SESSION_COOKIE_SECURE = True
SECURE_HSTS_SECONDS = 3600
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
CSRF_COOKIE_SECURE = True

# CKEDITOR_BASEPATH = "/static/django_ckeditor_5/src"
# CKEDITOR_BASEPATH = "/static/ckeditor/ckeditor5/"
CKEDITOR_BASEPATH = "/static/ckeditor/ckeditor/"
CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_IMAGE_BACKEND = "ckeditor_uploader.backends.PillowBackend"

# Application definition

customColorPalette = [
    {"color": "hsl(4, 90%, 58%)", "label": "Red"},
    {"color": "hsl(340, 82%, 52%)", "label": "Pink"},
    {"color": "hsl(291, 64%, 42%)", "label": "Purple"},
    {"color": "hsl(262, 52%, 47%)", "label": "Deep Purple"},
    {"color": "hsl(231, 48%, 48%)", "label": "Indigo"},
    {"color": "hsl(207, 90%, 54%)", "label": "Blue"},
]

CKEDITOR_5_CONFIGS = {
    "default": {
        "toolbar": {
            "items": [
                "undo",
                "redo",
                "|",
                "heading",
                {
                    "label": "Fonts",
                    "withText": True,
                    "items": [
                        "fontSize",
                        "fontFamily",
                        "fontColor",
                        "fontBackgroundColor",
                    ],
                },
                {
                    "name": "paragraph",
                    "label": "Paragraph",
                    "withText": True,
                    "items": [
                        "NumberedList",
                        "BulletedList",
                        "TodoList",
                        "-",
                        "Outdent",
                        "Indent",
                        "-",
                        "Blockquote",
                        "-",
                        "alignment",
                    ],
                },
                {
                    "name": "image",
                    "label": "Image",
                    "withText": True,
                    "items": [
                        "imageTextAlternative",
                        "imageStyle:alignLeft",
                        "imageStyle:side",
                        "imageStyle:alignRight",
                        "imageStyle:alignCenter",
                        "imageStyle:side",
                        "linkImage",
                    ],
                },
                "|",
                "bold",
                "italic",
                "link",
                "strikethrough",
                "subscript",
                "superscript",
                "|",
                "blockQuote",
                "code",
                "codeBlock",
                "sourceEditing",
                "|",
                "mediaEmbed",
                "uploadImage",
                "|",
                "insertTable",
                "tableColumn",
                "tableRow",
                "mergeTableCells",
            ],
            "shouldNotGroupWhenFull": True,
        },
        "image": {
            "toolbar": [
                "imageTextAlternative",
                "imageStyle:alignLeft",
                "imageStyle:side",
                "imageStyle:alignRight",
                "imageStyle:alignCenter",
                "imageStyle:side",
                "linkImage",
            ],
            "styles": ["alignLeft", "alignRight", "alignCenter", "side"],
        },
        "table": {
            "contentToolbar": [
                "tableColumn",
                "tableRow",
                "mergeTableCells",
                "tableProperties",
                "tableCellProperties",
            ],
            "tableProperties": {
                "borderColors": customColorPalette,
                "backgroundColors": customColorPalette,
            },
            "tableCellProperties": {
                "borderColors": customColorPalette,
                "backgroundColors": customColorPalette,
            },
        },
    },
    "plugins": {
        "table": {
            "contentToolbar": [
                "tableColumn",
                "tableRow",
                "mergeTableCells",
                "tableProperties",
                "tableCellProperties",
            ],
            "tableProperties": {
                "borderColors": customColorPalette,
                "backgroundColors": customColorPalette,
            },
            "tableCellProperties": {
                "borderColors": customColorPalette,
                "backgroundColors": customColorPalette,
            },
        },
    },
    "list": {
        "properties": {
            "styles": "true",
            "startIndex": "true",
            "reversed": "true",
        }
    },
}

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "template_partials",
    "crispy_forms",
    "crispy_bootstrap5",
    "crispy_tailwind",
    "widget_tweaks",
    "django_tables2",
    "django_filters",
    "django_extensions",
    "tailwind",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.apple",
    "allauth.socialaccount.providers.github",
    "allauth.socialaccount.providers.google",
    "django_celery_beat",
    "django_celery_results",
    "corsheaders",
    "chats",
    "channels",
    "django_ckeditor_5",
    "core",
]
# ASGI_APPLICATION = 'main.routing.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
        },
    },
}

TAILWIND_APP_NAME = "theme"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_htmx.middleware.HtmxMiddleware",  # HTMX Middleware
    "allauth.account.middleware.AccountMiddleware",
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

ROOT_URLCONF = "main.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "loaders": [
                "django.template.loaders.filesystem.Loader",
                "django.template.loaders.app_directories.Loader",
                # ... any other loaders ...
            ],
        },
    },
]


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by email
    "allauth.account.auth_backends.AuthenticationBackend",
]

WSGI_APPLICATION = "main.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES2 = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

DATABASES = {
    "default": {
        "ENGINE": DB_ENGINE,
        "NAME": POSTGRES_DB,
        "USER": POSTGRES_USER,
        "PASSWORD": POSTGRES_PASSWORD,
        "HOST": DB_HOST,
        "PORT": DB_PORT,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"


TIME_ZONE = "America/New_York"
USE_TZ = True
USE_I18N = True


CELERY_TIMEZONE = "America/New_York"
CELERY_ENABLE_UTC = False

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_SSL = True
EMAIL_PORT = 465
AUTH_USER_MODEL = "core.User"

CELERY_BROKER_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB_CELERY}"
CELERY_RESULT_BACKEND = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB_RESULT}"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://{}:{}/{}".format(REDIS_HOST, REDIS_PORT, REDIS_DB_CACHE),
        #'LOCATION': 'redis://redis:6379/20',
        "TIMEOUT": 10 * 60,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "select2": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://{}:{}/{}".format(REDIS_HOST, REDIS_PORT, REDIS_DB_CACHE),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
}

CELERY_BEAT_SCHEDULE = {}


SELECT2_CACHE_BACKEND = "select2"

# Use email authentication instead of username authentication
# ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_LOGIN_METHODS = {"email"}

# Make email required and unique
ACCOUNT_UNIQUE_EMAIL = True

# Optionally, remove the username field
# ACCOUNT_USER_MODEL_USERNAME_FIELD = None


# Use email as the primary identifier
ACCOUNT_USER_MODEL_EMAIL_FIELD = "email"

# If you don't want to use the username field at all
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"  # Options: 'mandatory', 'optional', or 'none'
ACCOUNT_RATE_LIMITS = {
    "login_failed": "5/300s",  # 5 attempts per 300 seconds
}
ACCOUNT_LOGOUT_REDIRECT_URL = "/"
LOGIN_REDIRECT_URL = "/"


SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": os.environ.get("SOCIALACCOUNT_GOOGLE_CLIENT_ID", ""),
            "secret": os.environ.get("SOCIALACCOUNT_GOOGLE_SECRET", ""),
            "key": "",
        },
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}


# LOGGING = {
#    'version': 1,
#    'disable_existing_loggers': False,
#    'handlers': {
#        'file': {
#            'level': 'DEBUG',
#            'class': 'logging.FileHandler',
#            'filename': '/tmp/debug.log',
#        },
#    },
#    'loggers': {
#        'django': {
#            'handlers': ['file'],
#            'level': 'DEBUG',
#            'propagate': True,
#        },
#    },
# }
